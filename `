[1mdiff --git a/src/main/scala/com/salad/idlehero/model/Enemy.scala b/src/main/scala/com/salad/idlehero/model/Enemy.scala[m
[1mindex 407fb65..6ae7de2 100644[m
[1m--- a/src/main/scala/com/salad/idlehero/model/Enemy.scala[m
[1m+++ b/src/main/scala/com/salad/idlehero/model/Enemy.scala[m
[36m@@ -19,8 +19,8 @@[m [mcase class Enemy(name: String,[m
     if (crit)[m
       println("It's a critical strike!")[m
 [m
[31m-    val attackNet = attackDamage * multiplier - armor[m
[31m-    val magicNet = magicDamage * multiplier - magicResist[m
[32m+[m[32m    val attackNet = Math.max(attackDamage * multiplier - armor, 0)[m
[32m+[m[32m    val magicNet = Math.max(magicDamage * multiplier - magicResist, 0)[m
     health = health - attackNet - magicNet[m
     println(s"You hit the ${displayName()} for $attackNet attack damage and $magicNet magic damage!")[m
 [m
[1mdiff --git a/src/main/scala/com/salad/idlehero/model/ItemStack.scala b/src/main/scala/com/salad/idlehero/model/ItemStack.scala[m
[1mindex 12b965b..1b6c6d5 100644[m
[1m--- a/src/main/scala/com/salad/idlehero/model/ItemStack.scala[m
[1m+++ b/src/main/scala/com/salad/idlehero/model/ItemStack.scala[m
[36m@@ -1,3 +1,3 @@[m
 package com.salad.idlehero.model[m
 [m
[31m-case class ItemStack(item: Item, var quantity: Long = 0)[m
[32m+[m[32mclass ItemStack(val item: Item, var quantity: Long = 0)[m
[1mdiff --git a/src/main/scala/com/salad/idlehero/resource/JsonEnemyLoader.scala b/src/main/scala/com/salad/idlehero/resource/JsonEnemyLoader.scala[m
[1mindex 34a5d8a..d5f9f16 100644[m
[1m--- a/src/main/scala/com/salad/idlehero/resource/JsonEnemyLoader.scala[m
[1m+++ b/src/main/scala/com/salad/idlehero/resource/JsonEnemyLoader.scala[m
[36m@@ -23,7 +23,7 @@[m [mobject JsonEnemyLoader extends AbstractJsonResourceLoader {[m
         val name = dropItem.get("name").asText()[m
         val chance = dropItem.get("chance").asDouble()[m
         val quantity = dropItem.get("quantity").asLong()[m
[31m-        val itemStack = ItemStack(items(name), quantity)[m
[32m+[m[32m        val itemStack = new ItemStack(items(name), quantity)[m
         itemStack -> chance[m
       }.toMap[m
 [m
